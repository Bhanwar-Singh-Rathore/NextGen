datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

enum Icon {
  settings
  chart
  calendar
  check
  chip
  compass
  database
  flag
  home
  info
  link
  lock
  messages
  notification
  payment
  power
  receipt
  shield
  star
  tune
  videorecorder
  wallet
  warning
  headphone
  send
  pipelines
  person
  category
  contact
  clipboardIcon
}

model User {
  id           String         @id @default(uuid())
  name         String
  avatarUrl    String         @db.Text
  email        String         @unique
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt   
  address      String
  city         String
  zipCode      String
  state        String
  country      String  
  Funnels      Funnel[]
  Media        Media[]
  Contact      Contact[]
  Trigger      Trigger[]
  Automation   Automation[]
  Pipeline     Pipeline[]


  // TicketsAssigned   Ticket[]   @relation("AssignedTickets")
  // Notifications     Notification[]
}



model Pipeline {
  id           String     @id @default(uuid())
  name         String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Lane         Lane[]
  userId       String

  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Lane {
  id         String   @id @default(uuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  pipelineId String
  Pipeline   Pipeline @relation(fields: [pipelineId], references: [id], onDelete: Cascade)
 
  order      Int      @default(0)

  @@index([pipelineId])
}

// model Ticket {
//   id          String   @id @default(uuid())
//   name        String
//   createdAt   DateTime @default(now())
//   updatedAt   DateTime @updatedAt
//   laneId      String
//   order       Int      @default(0)
//   value       Decimal?
//   description String?
//   customerId  String?
//   assignedUserId String?

//   Lane        Lane     @relation(fields: [laneId], references: [id], onDelete: Cascade)
//   Customer    Contact? @relation(fields: [customerId], references: [id], onDelete: SetNull)
//   Assigned     User?   @relation(fields: [assignedUserId], references: [id], onDelete: SetNull)

//   @@index([laneId])
//   @@index([customerId])
//   @@index([assignedUserId])
// }

enum TriggerTypes {
  CONTACT_FORM
}

model Trigger {
  id           String       @id @default(uuid())
  name         String
  type         TriggerTypes
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  userId       String
  User         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  Automations  Automation[]

  @@index([userId])
}

model Automation {
  id                 String               @id @default(uuid())
  name               String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  triggerId          String?
  published          Boolean              @default(false)
  userId             String
  Trigger            Trigger?             @relation(fields: [triggerId], references: [id], onDelete: Cascade)
  User               User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  Action             Action[]
  AutomationInstance AutomationInstance[]

  @@index([triggerId])
  @@index([userId])
}

model AutomationInstance {
  id           String     @id @default(uuid())
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  active       Boolean    @default(false)

  @@index([automationId])
}

enum ActionType {
  CREATE_CONTACT
}

model Action {
  id           String     @id @default(uuid())
  name         String
  type         ActionType
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  automationId String
  order        Int
  Automation   Automation @relation(fields: [automationId], references: [id], onDelete: Cascade)
  laneId       String     @default("0")

  @@index([automationId])
}

model Contact {
  id           String   @id @default(uuid())
  name         String
  email        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String

  User        User      @relation(fields: [userId], references: [id], onDelete: Cascade)


  @@index([userId])
}

model Media {
  id           String     @id @default(uuid())
  type         String?
  name         String
  link         String     @unique
  userId       String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  User         User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Funnel {
  id            String       @id @default(uuid())
  name          String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  description   String?
  published     Boolean      @default(false)
  subDomainName String?      @unique
  favicon       String?      @db.Text
  userId        String
  User          User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  FunnelPages   FunnelPage[]
  liveProducts  String?      @default("[]")
  ClassName     ClassName[]

  @@index([userId])
}

model ClassName {
  id         String   @id @default(uuid())
  name       String
  color      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  funnelId   String
  customData String?  @db.Text
  Funnel     Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

model FunnelPage {
  id           String   @id @default(uuid())
  name         String
  pathName     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  visits       Int      @default(0)
  content      String?  @db.Text
  order        Int
  previewImage String?  @db.Text
  funnelId     String
  Funnel       Funnel   @relation(fields: [funnelId], references: [id], onDelete: Cascade)

  @@index([funnelId])
}

// model Notification {
//   id           String  @id @default(uuid())
//   notification String
//   userId       String
//   User         User    @relation(fields: [userId], references: [id], onDelete: Cascade)
//   createdAt    DateTime @default(now())
//   updatedAt    DateTime @updatedAt

//   @@index([userId])
// }
